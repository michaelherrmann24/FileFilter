{"version":3,"sources":["context/global-context.js","context/aws-context.js","actions/actions.js","components/aws/profile-select.js","components/file-drop/file-drop.js","service/FileReader.js","components/aws/AWSConfigFileDrop.js","service/log-event-service.js","components/log-group/log-group-select.js","components/filter-input/filter-input.js","components/page/page.js","components/log-events/log-events.js","components/file/file-input.js","App.js","serviceWorker.js","index.js"],"names":["InitGlobalState","logGroups","selectedGroup","page","filters","pagination","pageSize","GlobalContext","createContext","reducer","state","action","reduce","GlobalState","_ref","children","_useReducer","useReducer","_useReducer2","Object","slicedToArray","dispatch","react_default","a","createElement","Provider","value","objectSpread","InitAWSState","aws","profilesLoaded","AWSContext","AWSState","AddLogGroups","classCallCheck","this","createClass","key","SelectLogGroup","SetPage","SetRegexFilter","regexFilter","SetAWSCredential","profile","defineProperty","credentials","SetAWSOptions","options","SetAWSProfile","AWSProfilesLoaded","AWSSelectProfile","selectedProfile","AWSProfileSelect","_Component","props","possibleConstructorReturn","getPrototypeOf","call","inherits","event","selectedProfileEntry","entries","context","filter","_ref2","target","map","_ref3","_ref4","currentValue","Fragment","FormControl_default","as","onChange","select","bind","defaultValue","_ref5","_ref6","title","Component","contextType","themes","dark","--color","--highlight-color","--opacity","light","FileDrop","_this","dropRef","React","createRef","highlight","e","stopPropagation","preventDefault","stopEvent","setHighlight","handleDrop","dataTransfer","files","console","error","setState","updateCSSVariables","theme","div","current","addEventListener","handleDragIn","handleDragOut","handleDragOver","removeEventListener","_this2","forEach","prop","style","setProperty","className","concat","ref","Queue","list","listeners","deferredObj","push","notify","listener","length","deferred","shift","execute","DeferredFileReader","file","promise","Promise","resolve","reject","ExtFileReader","queue","reader","FileReader","onload","result","addListener","readAsText","FileReaderService","no_readers","fileQueue","i","_readFile","asyncToGenerator","regenerator_default","mark","_callee2","deferredFileReader","wrap","_context2","prev","next","addDeferred","abrupt","stop","_x2","apply","arguments","getInstance","instance","SPLIT_LINES_REGEX","PROFILE_REGEX","KEY_VALUE_REGEX","LoadAWSProfiles","_processFile","_callee","actionClass","content","currentProfile","_context","name","readFile","sent","split","line","profRegRes","exec","keyVal","trim","actionInst","_x","_handleDrop","responses","processFile","all","t0","file_drop_FileDrop","CloudWatchLogsService","secret","region","awsCloudWatchLogs","CloudWatchLogs","accessKeyId","secretAccessKey","_getLogGroups","describeLogGroups","err","resp","log","_getLogEvents","filterLogEvents","events","LogGroupSelect","_componentDidUpdate","prevProps","cloudWatchLogsService","aws_access_key_id","aws_secret_access_key","getLogGroups","selectLogGroup","lg","index","logGroupName","RegexFilterInput","rest","esm_extends","_useContext","useContext","type","RegExp","placeholder","Page","Container","fluid","test","Row","Col","md","LogEvents","_fetchEvents","_this$props","logGroup","logEvents","getLogEvents","logStreamNamePrefix","logEvent","message","t1","fetchEvents","_this$props2","page_Page","FileInput","lines","filArr","selectedFile","cur","es_FormControl","selectFile","App","selectedTab","keyEvent","global_context_GlobalState","aws_context_AWSState","Tabs","onSelect","tabSelect","Tab","eventKey","file_input_FileInput","Consumer","ctx","profile_select_AWSProfileSelect","log_group_select_LogGroupSelect","AWSConfigFileDrop_LoadAWSProfiles","gCtx","aCtx","log_events_LogEvents","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ccc187f.chunk.js","sourcesContent":["import React,{createContext,useReducer} from \"react\"; \n\nexport const InitGlobalState = {\n    logGroups:[],\n    selectedGroup:{},\n    page:[],\n    filters:{},\n    pagination:{\n        page:0,\n        pageSize:500\n    },\n};\n\nexport const GlobalContext = createContext(InitGlobalState);\n\nexport const reducer = (state, action) => {\n    return (action && action.reduce && action.reduce(state)) || state;\n}\n\nexport const GlobalState = ({ children }) => {\n    \n    const [state, dispatch] = useReducer(reducer, InitGlobalState);\n\n    return (\n      <GlobalContext.Provider value={{...state, dispatch}}>\n        {children}\n      </GlobalContext.Provider>\n    )\n  }\n\n\n","import React,{createContext,useReducer} from \"react\"; \n\nexport const InitAWSState = {\n    aws:{\n        \n    },\n    profilesLoaded:false\n\n};\n\nexport const AWSContext = createContext(InitAWSState);\n\nexport const reducer = (state, action) => {\n    return (action && action.reduce && action.reduce(state)) || state;\n}\n\nexport const AWSState = ({ children }) => {\n    \n    const [state, dispatch] = useReducer(reducer, InitAWSState);\n\n    return (\n      <AWSContext.Provider value={{...state, dispatch}}>\n        {children}\n      </AWSContext.Provider>\n    )\n  }\n\n\n","\nexport class AddLogGroups{\n    constructor(value){\n        this.value = value;\n    }\n    reduce(state){\n        return {...state,logGroups:this.value};\n    }\n}\nexport class SelectLogGroup{\n    constructor(value){\n        this.value = value;\n    }\n    reduce(state){\n        return {...state,selectedGroup:this.value};\n    }\n}\n\nexport class SetPage{\n    constructor(value){\n        this.value = value;\n    }\n    reduce(state){\n        return {...state,page:this.value};\n    }\n}\n\nexport class SetRegexFilter{\n    constructor(value){\n        this.value = value;\n    }\n    reduce(state){\n        return {\n            ...state,\n            filters:{\n                ...state.filters,\n                regexFilter:this.value\n            }\n        };\n    }\n}\n\nexport class SetAWSCredential{\n    constructor(profile,value){\n        this.value = value;\n        this.profile = profile;\n    }\n    reduce(state){\n        let results = {\n            ...state,\n            aws:{\n                ...state.aws,\n                [this.profile]:{\n                    ...state.aws[this.profile],\n                    credentials:{\n                        ...state.aws[this.profile].credentials,\n                        ...this.value\n                    }\n                }\n            }\n        };\n        return results;\n    }\n}\n\nexport class SetAWSOptions{\n    constructor(profile,value){\n        this.value = value;\n        this.profile = profile;\n    }\n    reduce(state){\n        let results = {\n            ...state,\n            aws:{\n                ...state.aws,\n                [this.profile]:{\n                    ...state.aws[this.profile],\n                    options:{\n                        ...state.aws[this.profile].options,\n                        ...this.value\n                    }\n                }\n            }\n        };\n        return results;\n    }\n}\nexport class SetAWSProfile{\n    constructor(profile, value){\n        this.value = value; \n        this.profile = profile;\n    }\n    reduce(state){\n        let results = {\n            ...state,\n            aws:{\n                ...state.aws,\n                [this.profile]:{\n                    ...state.aws[this.profile],\n                    ...this.value[this.profile]      \n                }\n            }\n        };\n        return results;\n    }\n}\n\nexport class AWSProfilesLoaded{\n    constructor(value){\n        this.value = value;\n    }\n    reduce(state){\n        return {\n            ...state,\n            profilesLoaded:this.value\n        }\n    }\n}\n\nexport class AWSSelectProfile{\n    constructor(value){\n        this.value = value;\n    }\n    reduce(state){\n        return {\n            ...state,\n            selectedProfile:this.value\n        }\n    }\n}","import React, { Component} from \"react\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport {AWSContext} from \"../../context/aws-context\";\nimport {AWSSelectProfile} from \"../../actions/actions\";\n\nimport \"./profile-select.css\";\n\nexport class AWSProfileSelect extends Component{\n    static contextType = AWSContext;\n\n    constructor(props) {\n        super(props);\n      }\n\n    select(event){\n        \n        let selectedProfileEntry = Object.entries(this.context.aws).filter(([key,value])=>{\n            return event.target.value === key;\n        }).map(([key,value])=>{\n            return value;\n        }).reduce((currentValue,value)=>{\n            return value;\n        });\n\n        if(selectedProfileEntry){\n            this.context.dispatch(new AWSSelectProfile(selectedProfileEntry));\n        }\n            \n    }\n\n    componentDidMount() {\n        this.context.dispatch(new AWSSelectProfile(this.context.aws['default']));\n    }\n\n    render(){\n        return (\n            <>\n                <label>Profiles</label>\n                <FormControl as=\"select\" onChange={this.select.bind(this)} defaultValue=\"default\">\n                    {\n                        Object.entries(this.context.aws).map( ([key,value])=>{\n                            return (<option key={key} title={key} >{key}</option>)\n                        })\n                    } \n                </FormControl> \n            </>\n        )\n    }\n}\n","import React, { Component } from \"react\";\n\nimport \"./file-drop.css\";\nconst themes = {\n  dark:{\n    \"--color\": \"midnightblue\",\n    \"--highlight-color\":\"yellow\",\n    \"--opacity\":\"0.9\",\n  },\n  light:{\n      \"--color\":\"white\",\n      \"--highlight-color\":\"yellow\",\n      \"--opacity\":\"0.6\",\n  }\n};\n\nexport class FileDrop extends Component {\n  constructor(props) {\n    super(props);\n    this.dropRef = React.createRef();\n    this.state = {highlight:\"\"};\n  }\n\n  stopEvent(e){\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  handleDragOver(e) {\n    this.stopEvent(e);\n    this.setHighlight(true);\n  }\n  handleDragIn(e) {\n    this.stopEvent(e);\n    this.setHighlight(true);\n  }\n  handleDragOut(e) {\n    this.stopEvent(e);\n    this.setHighlight(false);\n  }\n  handleDrop(e) {\n    this.stopEvent(e);\n    this.setHighlight(false);\n    if(this.props.handleDrop){\n      try{\n        this.props.handleDrop(e.dataTransfer.files);\n      }catch(e){\n        console.error(\"error handling Drop event\",e);\n      }\n      \n    }\n  }\n\n  setHighlight(highlight){\n    this.setState((state)=>{\n      return {...state, highlight:(highlight)? \"highlight\" : \"\"};\n    });\n  }\n\n  componentDidMount() {\n\n    this.updateCSSVariables(themes[this.props.theme]);\n    // this.setHighlight(false);\n    let div = this.dropRef.current;\n    if (div) {\n      div.addEventListener(\"dragenter\", this.handleDragIn.bind(this));\n      div.addEventListener(\"dragleave\", this.handleDragOut.bind(this));\n      div.addEventListener(\"dragover\", this.handleDragOver.bind(this));\n      div.addEventListener(\"drop\", this.handleDrop.bind(this));\n    }\n  }\n\n  componentWillUnmount() {\n    let div = this.dropRef.current;\n\n    if (div) {\n      div.removeEventListener(\"dragenter\", this.handleDragIn);\n      div.removeEventListener(\"dragleave\", this.handleDragOut);\n      div.removeEventListener(\"dragover\", this.handleDragOver);\n      div.removeEventListener(\"drop\", this.handleDrop);\n    }\n  }\n\n  updateCSSVariables(theme) {\n    Object.entries(theme).forEach(([prop, value]) => this.dropRef.current.style.setProperty(prop, value));\n  }\n\n  render() {\n    return (\n      <div className={`file-drop-wrapper ${this.state.highlight}`} ref={this.dropRef}>\n        <div className={`file-drop ${this.state.highlight}`}>{this.props.children}</div>\n      </div>\n    );\n  }\n}\n","/**\n * a queue that listens for incoming request and distributes them to workers listening for them\n */\nclass Queue {\n\n    list = [];\n    listeners = [];\n\n    addDeferred(deferredObj){\n        this.list.push(deferredObj);\n        this.notify();\n    }\n\n    addListener(listener){\n        this.listeners.push(listener);\n        this.notify();\n    }\n\n    notify(){\n        if(this.listeners.length > 0 && this.list.length > 0){\n\n            let deferred = this.list.shift();\n            let listener = this.listeners.shift();\n\n            listener.execute(deferred);\n            this.notify();\n        }\n    }    \n}\n\n/**\n * wrapper arround the promise which allows control of resolving and rejecting to a 3rd party\n */\nclass DeferredFileReader{\n    constructor(file){\n        this.file = file;\n        this.promise = new Promise((resolve,reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n\n/**\n * wrapper arround the JS FileReader which is promise based\n */\nclass ExtFileReader{\n    constructor(queue){\n        this.queue = queue;\n        this.reader = new FileReader();\n    }\n\n    async execute(deferred){\n        this.reader.onload = (e) => {\n            deferred.resolve(e.target.result);\n            this.queue.addListener(this);\n        }\n        this.reader.readAsText(deferred.file);\n    }\n\n}\n\n/**\n * the actual service. which hides all the above. \n * has a static method for singleton. (it should be) creating a lot of these creates memory leaks as chrome doesnt clean up FileReader nicely, so a limited number should be created and shared.\n */\nexport class FileReaderService {\n\n    constructor(no_readers){\n        this.fileQueue = new Queue();\n        for(let i=0;i<no_readers;i++){\n            this.fileQueue.addListener(new ExtFileReader(this.fileQueue));\n        }\n        \n    }\n    \n    async readFile(file){\n        let deferredFileReader = new DeferredFileReader(file);\n        this.fileQueue.addDeferred(deferredFileReader);\n        return deferredFileReader.promise;\n    }\n            \n}\n\nFileReaderService.getInstance = ()=>{\n    if(!FileReaderService.instance){\n        FileReaderService.instance = new FileReaderService(6);\n    }\n    return FileReaderService.instance;\n}\n","import React, { Component} from \"react\";\n\nimport {FileDrop} from \"../file-drop/file-drop\";\nimport {FileReaderService} from \"../../service/FileReader\";\nimport { AWSContext } from \"../../context/aws-context\";\nimport {SetAWSCredential,SetAWSOptions, SetAWSProfile,AWSProfilesLoaded} from \"../../actions/actions\";\n\nconst SPLIT_LINES_REGEX =/\\r\\n|\\n/;\nconst PROFILE_REGEX = /\\[(.*?)\\]/;\nconst KEY_VALUE_REGEX = /(.*?)=(.*)/;\n\nexport class LoadAWSProfiles extends Component{\n    static contextType = AWSContext;\n\n    async processFile(file){\n        let reader = FileReaderService.getInstance();\n        let actionClass = (file.name === 'credentials')? SetAWSCredential:SetAWSOptions;\n        let content = await reader.readFile(file);\n        let currentProfile = null;\n\n        content.split(SPLIT_LINES_REGEX).forEach((line)=>{\n            \n            let profRegRes = PROFILE_REGEX.exec(line);      \n            if(profRegRes && profRegRes[1]){\n                currentProfile = profRegRes[1];\n\n                this.context.dispatch(new SetAWSProfile(currentProfile,{[currentProfile]:{}}));\n            }\n\n            let keyVal = KEY_VALUE_REGEX.exec(line);\n            if(keyVal && keyVal[1] && keyVal[2]){\n                let value = {};\n                value[keyVal[1].trim()] = keyVal[2].trim();\n                \n                let actionInst = new actionClass(currentProfile,value);\n                this.context.dispatch(actionInst);\n            }\n\n        });\n        return ;\n    }\n\n    async handleDrop(files){\n        if(files && files.length > 0){\n            let responses = [];\n            for(let i=0;i<files.length;i++){\n                responses.push(this.processFile(files[i]));\n            }\n            try{\n                await Promise.all(responses);    \n                this.context.dispatch(new AWSProfilesLoaded(true));\n            }catch(e){\n                console.error(e)\n            }\n\n        }\n    }\n\n    render(){\n        return (\n            <FileDrop theme=\"light\" handleDrop={this.handleDrop.bind(this)}>Drop AWS profile files</FileDrop>\n        );\n    }\n    \n}\n","import {CloudWatchLogs} from \"aws-sdk\";\n\nexport class CloudWatchLogsService {\n\n    constructor(key, secret, region){\n        this.awsCloudWatchLogs = new CloudWatchLogs({accessKeyId:key,secretAccessKey:secret,region:region});\n    }\n\n    async getLogGroups(){\n        return new Promise((resolve,reject)=>{\n            this.awsCloudWatchLogs.describeLogGroups((err,resp)=>{\n                if(err){\n                    console.log(err);\n                    reject(err);\n                }\n                if(resp){\n                    resolve(resp.logGroups);\n                }\n            });\n        });    \n    }\n\n    async getLogEvents(options){\n        return new Promise((resolve,reject)=>{\n            this.awsCloudWatchLogs.filterLogEvents(options,(err,resp)=>{\n                if(err){\n                    console.log(err);\n                    reject(err);\n                }\n                if(resp){\n                    resolve(resp.events);\n                }\n              });\n        });\n    }\n\n}","import React,{Component} from 'react';\nimport {GlobalContext} from \"../../context/global-context\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport {CloudWatchLogsService} from \"../../service/log-event-service\";\n\nimport {AddLogGroups,SelectLogGroup} from \"../../actions/actions\";\n\nexport class LogGroupSelect extends Component{\n    static contextType = GlobalContext;\n\n    constructor(props){\n        super(props);\n    }\n\n    async componentDidUpdate(prevProps) {\n        \n        let {profile} = this.props;\n        \n        if( profile && profile !== prevProps.profile){\n           let region = profile.options.region;\n            let key = profile.credentials.aws_access_key_id;\n            let secret = profile.credentials.aws_secret_access_key; \n\n            if(key && secret){\n                let cloudWatchLogsService = new CloudWatchLogsService(key,secret,region);\n                try {\n                    let logGroups =  await cloudWatchLogsService.getLogGroups();\n                    this.context.dispatch(new AddLogGroups(logGroups));\n                }catch(err){\n                    console.log(err);\n                }\n            }\n        }\n  \n    } \n\n    selectLogGroup(event){\n        this.context.dispatch(new SelectLogGroup(this.context.logGroups[event.target.value]));\n    }\n\n    render(){\n        return (\n            <>\n                <label>Log Group</label>\n                <FormControl as=\"select\" onChange={this.selectLogGroup.bind(this)} defaultValue=\"\">\n                    <option></option>\n                    {\n                        this.context.logGroups.map((lg,index)=>{\n                            return (<option key={index} value={index} >{lg.logGroupName}</option>)\n                        })\n                    }\n                </FormControl>        \n            </>\n        )\n    }\n}","import React,{useContext} from 'react';\nimport {GlobalContext} from \"../../context/global-context\";\nimport {SetRegexFilter} from \"../../actions/actions\";\nimport FormControl from \"react-bootstrap/FormControl\";\n\nexport function RegexFilterInput({...rest}){\n    \n    const {filters,dispatch} = useContext(GlobalContext);\n\n    const handleChange = (event)=>{\n        dispatch(new SetRegexFilter(new RegExp(event.target.value)));\n    }\n\n    return (\n        <div {...rest}>\n            <FormControl className=\"\" as=\"input\" type=\"text\"  onChange={handleChange} placeholder=\"regex filter\" defaultValue={filters.regexFilter} ></FormControl>\n        </div>\n    )\n}","import React, { Component } from \"react\";\nimport { Row, Col, Container } from \"react-bootstrap\";\n\nimport { GlobalContext } from \"../../context/global-context\";\n\nimport \"./page.css\";\n\nexport class Page extends Component {\n  static contextType = GlobalContext;\n\n  render() {\n    return (\n      <Container fluid={true}>\n        {this.context.page\n          .filter(line => {\n            return this.context.filters && this.context.filters.regexFilter\n              ? this.context.filters.regexFilter.test(line)\n              : true;\n          })\n          .map((line, index) => {\n            return (\n              <Row key={index}>\n                <div className=\"num-col text-center\">{index}</div>\n                <Col md={11}>{line}</Col>\n              </Row>\n            );\n          })}\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport { GlobalContext } from \"../../context/global-context\";\n\nimport { CloudWatchLogsService } from \"../../service/log-event-service\";\n\nimport { SetPage } from \"../../actions/actions\";\nimport {Page} from \"../../components/page/page\";\n\nexport class LogEvents extends Component {\n  static contextType = GlobalContext;\n\n\n  async fetchEvents() {\n    let { profile, logGroup } = this.props;\n    let region = profile.options.region;\n    let key = profile.credentials.aws_access_key_id;\n    let secret = profile.credentials.aws_secret_access_key;\n\n    if (key && secret) {\n      let cloudWatchLogsService = new CloudWatchLogsService(\n        key,\n        secret,\n        region\n      );\n      try {\n        let logEvents = (await cloudWatchLogsService.getLogEvents({\n          logGroupName: logGroup,\n          logStreamNamePrefix: \"20\"\n        }))\n        .map((logEvent)=>{\n            return logEvent.message;\n        });\n        this.context.dispatch(new SetPage(logEvents));\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.fetchEvents();\n  }\n\n  componentDidUpdate(prevProps) {\n    let { profile, logGroup } = this.props;\n    if (\n      profile &&\n      logGroup &&\n      profile !== prevProps.profile &&\n      logGroup !== prevProps.logGroup\n    ) {\n      this.fetchEvents();\n    }\n  }\n\n  render() {\n    return ( <Page></Page>)\n  }\n}\n","import React,{Component} from \"react\";\nimport {FormControl} from \"react-bootstrap\";\nimport {FileDrop} from \"../file-drop/file-drop\"\nimport {FileReaderService} from \"../../service/FileReader\"\nimport { SetPage } from \"../../actions/actions\";\nimport { GlobalContext } from \"../../context/global-context\";\nconst SPLIT_LINES_REGEX =/\\r\\n|\\n/;\n\nexport class FileInput extends Component{\n    static contextType = GlobalContext;\n    constructor(props){\n        super(props);\n        this.state = {files:[]};\n    }\n\n    async processFile(file){\n        let reader = FileReaderService.getInstance();\n\n        //should probably check the file size and split it up into chunks. then join lines together later.\n\n\n        let content = await reader.readFile(file);\n\n        let lines = content.split(SPLIT_LINES_REGEX);\n        this.context.dispatch(new SetPage(lines));\n    }\n\n    async handleDrop(files){\n        console.log(\"files\",files);\n        let filArr = []\n        if(files && files.length > 0){\n            let responses = [];\n            for(let i=0;i<files.length;i++){\n                filArr.push(files[i]);\n            }\n            this.setState({files:filArr});\n            this.processFile(filArr[0]);\n        }\n\n    }\n\n    selectFile(event){\n        let selectedFile = this.state.files.filter((file)=>{\n            return event.target.value === file.name;\n        }).reduce((cur,value)=>{\n            return value;\n        })\n        this.processFile(selectedFile);\n    }\n\n    render(){\n        console.log(\"state\",this.state);\n        if(this.state.files.length > 0){\n            return (\n                <>\n                    <label>Files</label>\n                    <FormControl as=\"select\" onChange={this.selectFile.bind(this)} defaultValue={this.state.files[0]}>\n                        {\n                            this.state.files.map((file)=>{\n                                console.log(file);\n                                return (<option key={file.name} value={file.name} title={file.name} >{file.name}</option>)\n                            })\n                        } \n                    </FormControl> \n                </> \n            )\n        }else{\n            return (<FileDrop theme=\"light\" handleDrop={this.handleDrop.bind(this)}>Drop file</FileDrop>)\n        }\n\n        \n    }\n}","import React,{Component} from 'react';\n// import {FileDrop} from './components/file-drop/file-drop';\nimport {GlobalState,GlobalContext} from \"./context/global-context\";\nimport {Row,Col,Tabs,Tab} from \"react-bootstrap\";\nimport {AWSState,AWSContext} from \"./context/aws-context\";\nimport {AWSProfileSelect} from \"./components/aws/profile-select\"\nimport {LoadAWSProfiles} from \"./components/aws/AWSConfigFileDrop\";\nimport {LogGroupSelect} from \"./components/log-group/log-group-select\";\nimport {RegexFilterInput} from \"./components/filter-input/filter-input\"\nimport {LogEvents} from \"./components/log-events/log-events\";\nimport {FileInput} from \"./components/file/file-input\"; \nimport {Page} from \"./components/page/page\";\n\nimport './App.css';\n\nexport class App extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {selectedTab:\"file\"};\n  }\n\n  tabSelect(keyEvent){\n    this.setState({selectedTab:keyEvent})\n  }\n\n  render(){\n    return  (\n      <GlobalState>\n        <AWSState>\n          <div className=\"content-holder\">\n            <header>\n                <Tabs onSelect={this.tabSelect.bind(this)}>\n                  <Tab eventKey=\"file\" title=\"File\">\n                    <FileInput></FileInput>\n                  </Tab>\n                  <Tab eventKey=\"aws\" title=\"AWS\">\n                    <AWSContext.Consumer>\n                      { \n                        ctx => ( \n                          (\n                            ctx.profilesLoaded && (\n                              <>\n                                <Row><Col md={6}><AWSProfileSelect></AWSProfileSelect></Col></Row>\n                                <Row><Col md={6}><LogGroupSelect test=\"test\" profile={ctx.selectedProfile}></LogGroupSelect></Col></Row>\n                              </>\n                            )  \n                          ) || (\n                            <Row className=\"p-4\" ><Col md={6}><LoadAWSProfiles></LoadAWSProfiles></Col></Row>\n                          ) \n                        ) \n                      }\n                    </AWSContext.Consumer>\n\n                  </Tab>\n                </Tabs>\n              <Row><Col md={12}><RegexFilterInput></RegexFilterInput></Col></Row>\n            </header>\n            <div className=\"content\">\n              {\n                this.state.selectedTab === \"file\" && \n                (\n                  <GlobalContext.Consumer>\n                    {gCtx => ( <Page></Page>)}\n                  </GlobalContext.Consumer>\n                )\n              }\n              { this.state.selectedTab === \"aws\" && \n                (\n                  <AWSContext.Consumer>\n                    {\n                      aCtx =>( \n                        aCtx.profilesLoaded && aCtx.selectedProfile && \n                        (\n                          <GlobalContext.Consumer>\n                            {gCtx => ( gCtx.selectedGroup && gCtx.selectedGroup.logGroupName && (<LogEvents profile={aCtx.selectedProfile} logGroup={gCtx.selectedGroup.logGroupName}></LogEvents> ))}\n                          </GlobalContext.Consumer>\n                        ) \n                      )\n                    }\n                  </AWSContext.Consumer>\n                )\n              }\n              \n              \n            </div>\n            <footer ></footer>\n          </div>\n        </AWSState>\n      </GlobalState>\n      )\n  }\n  \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}